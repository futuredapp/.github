name: Detect changes and generate changelog

on:
    workflow_call:
        inputs:
            depth:
                required: false
                description: The depth of the git history to fetch. Default is 100.
                type: number
                default: 100
            debug:
                required: false
                description: Enable debug mode. Default is false.
                type: boolean
                default: false

jobs:
  get_last_merge_commit:
    runs-on: ubuntu-latest
    name: Get last merge commit
    outputs:
        skip_build: ${{ steps.get_last_merge_commit.outputs.latest_commit == ''}}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: ${{ inputs.depth }}
      - name: Calculate previous run id
        id: prev_run_id
        run: echo "run_id=$(expr ${{ github.run_number }} - 1)" >> $GITHUB_OUTPUT
      - name: Get lastest build commit
        id: get_last_build_commit
        uses: actions/cache@v4
        continue-on-error: true
        with:
          path: latest_builded_commit.txt
          key: latest_builded_commit-${{ steps.prev_run_id.outputs.run_id }}
      - name: Get last merge commit
        id: get_last_merge_commit
        run: |
          if [ -f latest_builded_commit.txt ]; then
            LASTEST_BUILD_COMMIT=$(cat latest_builded_commit.txt)

            if [ "${{ inputs.debug }}" == "true" ]; then
              echo "DEBUG - Last build commit $LASTEST_BUILD_COMMIT"
            fi

            # Will get the all merge commits from the last build commit which is not older than 24 hours
            # and will get the last one
            LAST_COMMIT=$(git rev-list --merges --after="24 hours ago" $LASTEST_BUILD_COMMIT..HEAD | tail -n 1)

            if [ "${{ inputs.debug }}" == "true" ]; then
              echo "DEBUG - Last commit $LAST_COMMIT"
            fi

            if [ -z "$LAST_COMMIT" ]; then
              # If there are no merge commits in the last 24 hours
              echo "latest_commit=''" >> $GITHUB_OUTPUT
              if [ "${{ inputs.debug }}" == "true" ]; then
                echo "DEBUG - No merge commits in the last 24 hours"
              fi
            elif [ "$LAST_COMMIT" == "$LASTEST_BUILD_COMMIT" ]; then
              # If the last commit is the same as the last build commit
              echo "latest_commit=''" >> $GITHUB_OUTPUT
                if [ "${{ inputs.debug }}" == "true" ]; then
                    echo "DEBUG - Last commit is the same as the last build commit"
                fi
            else
              # If the last commit is different from the last build commit
              echo "latest_commit=$LASTEST_BUILD_COMMIT" >> $GITHUB_OUTPUT
                if [ "${{ inputs.debug }}" == "true" ]; then
                    echo "DEBUG - Last commit is different from the last build commit"
                fi
            fi
          else
            # If the file doesn't exist, we will get the last merge commit from the last 24 hours
            echo "latest_builded_commit.txt does not exist"
            LAST_COMMIT=$(git rev-list --merges --after="24 hours ago" HEAD | tail -n 1)
            if [ "${{ inputs.debug }}" == "true" ]; then
              echo "DEBUG - Last commit $LAST_COMMIT"
            fi
            echo "latest_commit=$LAST_COMMIT" >> $GITHUB_OUTPUT
          fi
      - name: Generate changelog
        if: steps.get_last_merge_commit.outputs.latest_commit != ''
        run: |
          FROM_COMMIT=${{ steps.get_last_merge_commit.outputs.latest_commit }}
          LAST_COMMIT=$(git rev-parse HEAD)
          if [ "$FROM_COMMIT" = "$LAST_COMMIT" ]; then
            # If the last merged commit and the current commit are the same, get the changelog from the commit before the current commit to the current commit
            CHANGELOG=$(git log --merges --pretty=format:"%b" HEAD~1..$LAST_COMMIT)
          else
            # If they are not the same, get the changelog from the last merged commit to the current commit
            CHANGELOG=$(git log --merges --pretty=format:"%b" $FROM_COMMIT..$LAST_COMMIT)
          fi
          if [ "${{ inputs.debug }}" == "true" ]; then
            echo "DEBUG - Generate changelog $CHANGELOG"
          fi
          echo "$CHANGELOG" > changelog.txt
      - name: Save changelog
        if: steps.get_last_merge_commit.outputs.latest_commit != ''
        uses: actions/upload-artifact@v4
        with:
          name: changelog
          path: changelog.txt